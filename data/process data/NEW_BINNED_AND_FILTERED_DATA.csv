import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()import operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()vimport operator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures

data_train_x = pd.read_csv('melb_weather_normalized.csv')
data_train_y = pd.read_csv('pdd_melb_normalized.csv')
x_cols = "Mean Temperature (°C)"
#x_cols = ["Mean Temperature (°C)", "Evaporation (mm)", "Speed of maximum wind gust (km/h)"]
y_cols = "Normalized"
X = data_train_x[x_cols]
Y = data_train_y[y_cols]
plt.scatter(X, Y)
plt.savefig("Mean_Temp_Uno.png")
plt.close()

polynomial_features= PolynomialFeatures(degree=2)
X = np.array(X)
X = np.reshape(X, (-1,1))
x_poly = polynomial_features.fit_transform(X)

model = LinearRegression()
model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp.png")
# plt.close()

# TESTING

data_test_x = pd.read_csv('melb_weather_normalized_testing.csv')
data_test_y = pd.read_csv('pdd_melb_normalized_testing.csv')
x_cols = "Mean Temperature (°C)"
y_cols = "Normalized"
X_test = data_test_x[x_cols]
Y_test = data_test_y[y_cols]

X_test = np.array(X_test)
X_test = np.reshape(X_test, (-1,1))

y_pred = model.predict(X_test)
r2 = model.score(X_test, Y_test)
mse = mean_squared_error(Y_test, y_pred)

print('R2', r2)
print('MSE', mse)
# plt.scatter(X, Y)
# plt.savefig("Mean_Temp_Uno_Test.png")
# plt.close()

# polynomial_features= PolynomialFeatures(degree=2)
# X = np.array(X)
# X = np.reshape(X, (-1,1))
# x_poly = polynomial_features.fit_transform(X)

# model = LinearRegression()
# model.fit(x_poly, Y)
# y_poly_pred = model.predict(x_poly)

# rmse = np.sqrt(mean_squared_error(Y,y_poly_pred))
# r2 = r2_score(Y,y_poly_pred)
# print(rmse)
# print(r2)
# plt.scatter(X, Y, s=10)
# # sort the values of x before line plot
# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(X,y_poly_pred), key=sort_axis)
# X, y_poly_pred = zip(*sorted_zip)
# plt.plot(X, y_poly_pred, color='m')
# plt.savefig("5.poly_result_temp_test.png")
# plt.close()Date,Mean Temperature (°C),Rainfall (mm),Evaporation (mm),Speed of maximum wind gust (km/h),TOTAL DEMAND,Binned Mean Temperature (°C),Binned Rainfall (mm),Binned Evaporation (mm),Binned Speed of maximum wind gust (km/h),Binned TOTAL DEMAND
2021/08/08,0.1690140845070422,0.013215859030837,0.073170731707317,0.0327868852459016,4812.15,1,0,1,0,6
2021/08/12,0.2476525821596243,0.0616740088105726,0.2682926829268293,0.2622950819672131,5245.86,2,3,4,3,8
2021/12/07,0.3802816901408449,0.013215859030837,0.524390243902439,0.2950819672131147,4714.37,3,0,7,4,5
2021/09/24,0.3943661971830985,0.0,0.4634146341463415,0.5737704918032787,4036.37,3,0,6,8,3
2021/05/19,0.3415492957746478,0.0,0.2195121951219512,0.3934426229508196,5078.29,3,0,3,5,7
2021/02/27,0.3708920187793427,0.0,0.3658536585365854,0.081967213114754,4309.07,3,0,5,1,4
2021/11/18,0.6197183098591547,0.0,0.3048780487804878,0.8524590163934426,4368.78,6,0,4,12,4
2021/11/02,0.6596244131455398,0.0,0.3658536585365854,0.4590163934426229,3707.69,6,0,5,6,1
2021/02/20,0.6889671361502345,0.0,0.8292682926829269,0.2950819672131147,5065.78,6,0,12,4,7
2021/02/09,0.5610328638497653,0.0,0.2439024390243902,0.2131147540983606,4451.44,5,0,3,3,4
2021/02/05,0.7922535211267604,0.0088105726872246,0.475609756097561,0.6065573770491803,5020.45,7,0,7,9,7
2021/06/26,0.1960093896713614,0.1233480176211453,0.0121951219512195,0.2131147540983606,5037.12,1,6,0,3,7
2021/04/08,0.7570422535211266,0.0,0.2804878048780488,0.4590163934426229,4791.56,7,0,4,6,6
2022/02/01,0.6607981220657276,0.0,0.5853658536585367,0.5737704918032787,4768.11,6,0,8,8,6
2021/07/19,0.1772300469483567,0.0,0.1097560975609756,0.2622950819672131,5739.95,1,0,1,3,10
2022/02/25,0.5751173708920185,0.0,0.2926829268292683,0.360655737704918,4442.97,5,0,4,5,4
2021/12/25,0.555164319248826,0.0,0.4146341463414634,0.3934426229508196,3446.63,5,0,6,5,0
2021/06/16,0.2535211267605633,0.039647577092511,0.1341463414634146,0.4262295081967213,5505.86,2,1,2,6,9
2021/05/24,0.3075117370892017,0.0,0.1585365853658537,0.2622950819672131,5052.52,3,0,2,3,7
2022/01/04,0.5751173708920185,0.0,0.4634146341463415,0.4590163934426229,4216.63,5,0,6,6,3
2021/06/15,0.1936619718309858,0.0,0.048780487804878,0.1475409836065573,5476.77,1,0,0,2,8
2022/03/10,0.4542253521126759,0.0,0.4024390243902439,0.360655737704918,4331.74,4,0,6,5,4
2022/01/31,0.9225352112676054,0.0,0.2682926829268293,0.1147540983606557,6082.31,9,0,4,1,11
2021/10/02,0.368544600938967,0.2555066079295154,0.1829268292682927,0.2131147540983606,4244.55,3,12,2,3,3
2021/09/19,0.2910798122065727,0.0176211453744493,0.3536585365853659,0.639344262295082,4246.08,2,0,5,9,3
2021/05/13,0.272300469483568,0.0,0.073170731707317,0.3934426229508196,5263.5,2,0,1,5,8
2021/09/04,0.2288732394366195,0.841409691629956,0.2682926829268293,0.4590163934426229,4395.93,2,42,4,6,4
2021/08/23,0.2159624413145539,0.0176211453744493,0.426829268292683,0.5737704918032787,4984.06,2,0,6,8,6
2021/10/14,0.3262910798122065,0.3259911894273128,0.3780487804878049,0.3934426229508196,4584.84,3,16,5,5,5
2022/02/16,0.6244131455399061,0.0,0.3414634146341463,0.0655737704918032,5016.35,6,0,5,0,7
2021/11/21,0.3579812206572768,0.0,0.3292682926829269,0.3934426229508196,3615.27,3,0,4,5,1
2021/11/11,0.2723004694835679,0.2202643171806167,0.1585365853658537,0.3934426229508196,4402.81,2,11,2,5,4
2022/03/04,0.8791079812206571,0.0,0.4878048780487805,0.2131147540983606,5688.97,8,0,7,3,9
2021/06/09,0.1748826291079811,0.0881057268722467,0.0975609756097561,0.8524590163934426,5776.99,1,4,1,12,10
2021/03/17,0.6138497652582158,0.0,0.1707317073170731,0.1475409836065573,4759.07,6,0,2,2,6
2021/06/11,0.1725352112676055,0.0088105726872246,0.024390243902439,0.1147540983606557,5437.73,1,0,0,1,8
2022/03/03,0.7981220657276994,0.0,0.2195121951219512,0.1475409836065573,5488.52,7,0,3,2,8
2021/05/16,0.2230046948356806,0.0044052863436123,0.1829268292682927,0.3278688524590163,4762.69,2,0,2,4,6
2021/10/23,0.3075117370892017,0.3215859030837004,0.4634146341463415,0.3934426229508196,4278.16,3,16,6,5,4
2021/07/25,0.1150234741784037,0.0176211453744493,0.2195121951219512,0.5409836065573771,5219.97,1,0,3,8,7
2021/12/22,0.4847417840375586,0.0,0.4634146341463415,0.2131147540983606,4200.38,4,0,6,3,3
2021/11/27,0.4636150234741784,0.0,0.3536585365853659,0.5081967213114754,3465.39,4,0,5,7,0
2021/05/23,0.2992957746478872,0.0,0.2073170731707317,0.1475409836065573,4579.13,2,0,3,2,5
2021/12/17,0.6725352112676055,0.0,0.4146341463414634,0.2459016393442623,4633.92,6,0,6,3,5
2021/06/25,0.2089201877934271,0.013215859030837,0.1463414634146341,0.360655737704918,5722.63,2,0,2,5,9
2021/02/11,0.8978873239436618,0.0,0.4878048780487805,0.5081967213114754,5619.33,8,0,7,7,9
2021/03/29,0.4131455399061031,0.0220264317180616,0.1707317073170731,0.3278688524590163,4631.35,4,1,2,4,5
2021/03/26,0.4377934272300469,0.0044052863436123,0.1707317073170731,0.2950819672131147,4613.95,4,0,2,4,5
2021/12/12,0.612676056338028,0.0,0.3780487804878049,0.2131147540983606,3801.32,6,0,5,3,2
2021/03/03,0.408450704225352,0.0,0.2682926829268293,0.2950819672131147,4697.81,4,0,4,4,5
2021/09/18,0.334507042253521,0.0176211453744493,0.3292682926829269,0.5737704918032787,4072.97,3,0,4,8,3
2022/02/02,0.4788732394366197,0.0704845814977973,0.524390243902439,0.4262295081967213,4303.9,4,3,7,6,4
2021/08/30,0.2617370892018778,0.0881057268722467,0.0853658536585365,0.5737704918032787,4836.63,2,4,1,8,6
2021/03/20,0.5997652582159624,0.0,0.3292682926829269,0.2622950819672131,4161.39,5,0,4,3,3
2022/02/14,0.7699530516431926,0.0,0.7682926829268293,0.5081967213114754,5337.33,7,0,11,7,8
2021/03/31,0.4800469483568074,0.0,0.1951219512195122,0.0655737704918032,4737.36,4,0,2,0,5
2021/08/31,0.4037558685446008,0.0,0.3536585365853659,0.7540983606557377,4719.59,4,0,5,11,5
2022/01/18,0.556338028169014,0.0,0.4634146341463415,0.3934426229508196,4346.9,5,0,6,5,4
2021/07/26,0.2711267605633801,0.0,0.0609756097560975,0.4590163934426229,5479.98,2,0,0,6,8
2021/04/30,0.4776995305164317,0.0,0.0,0.2459016393442623,4898.57,4,0,0,3,6
2022/01/20,0.6995305164319248,0.0,0.6097560975609757,0.2622950819672131,4662.52,6,0,9,3,5
2021/04/19,0.436619718309859,0.0,0.1707317073170731,0.2459016393442623,4769.14,4,0,2,3,6
2021/12/28,0.4835680751173707,0.0,0.4878048780487805,0.4262295081967213,3333.95,4,0,7,6,0
2021/10/05,0.3180751173708919,0.0484581497797356,0.3292682926829269,0.639344262295082,4683.1,3,2,4,9,5
2022/03/17,0.7746478873239435,0.0,0.2804878048780488,0.2950819672131147,5101.26,7,0,4,4,7
2021/02/02,0.4589201877934271,0.0,0.1829268292682927,0.4262295081967213,4422.4,4,0,2,6,4
2021/12/01,0.8814553990610327,0.0,0.6951219512195123,0.4590163934426229,5072.66,8,0,10,6,7
2021/07/07,0.118544600938967,0.0,0.048780487804878,0.3366421015691582,5964.84,1,0,0,5,10
2021/04/17,0.3673708920187793,0.0,0.1951219512195122,0.1147540983606557,4439.3,3,0,2,1,4
2021/06/07,0.3204225352112675,0.0,0.0609756097560975,0.7213114754098361,5116.0,3,0,0,10,7
2021/04/15,0.4237089201877934,0.0,0.451219512195122,0.3934426229508196,4752.79,4,0,6,5,6
2021/10/21,0.606807511737089,0.0,0.3170731707317074,0.3934426229508196,4350.62,6,0,4,5,4
2022/01/01,0.9730046948356806,0.0,1.0,0.2950819672131147,4949.38,9,0,14,4,6
2021/05/11,0.2969483568075117,0.3480176211453745,0.1707317073170731,0.4262295081967213,5169.06,2,17,2,6,7
2021/08/24,0.1455399061032863,0.2290748898678414,0.2439024390243902,0.3934426229508196,5228.87,1,11,3,5,7
2021/11/24,0.7347417840375585,0.0,0.3414634146341463,0.2459016393442623,4621.43,7,0,5,3,5
2021/09/25,0.1279342723004694,0.0,0.2804878048780488,0.360655737704918,4354.64,1,0,4,5,4
2021/09/23,0.4049295774647886,0.0,0.1707317073170731,0.3278688524590163,4360.88,4,0,2,4,4
2021/04/24,0.4014084507042253,0.0,0.1951219512195122,0.2459016393442623,4586.88,4,0,2,3,5
2022/03/18,0.6079812206572768,0.0,0.3048780487804878,0.2622950819672131,4791.69,6,0,4,3,6
2021/02/08,0.4577464788732394,0.0088105726872246,0.2439024390243902,0.3278688524590163,4341.75,4,0,3,4,4
2021/04/20,0.3615023474178404,0.0,0.3414634146341463,0.4754098360655737,5096.85,3,0,5,7,7
2021/12/18,0.8239436619718307,0.0,0.7804878048780489,0.5081967213114754,4463.13,8,0,11,7,4
2022/01/27,0.9049295774647884,0.1541850220264317,0.7926829268292683,0.6065573770491803,6183.4,9,7,11,9,11
2021/03/30,0.3415492957746478,0.0,0.2195121951219512,0.180327868852459,4674.82,3,0,3,2,5
2021/02/07,0.436619718309859,0.039647577092511,0.3414634146341463,0.360655737704918,3827.72,4,1,5,5,2
2021/04/21,0.1948356807511737,0.2290748898678414,0.0121951219512195,0.0655737704918032,5143.59,1,11,0,0,7
2021/11/26,0.4636150234741784,0.013215859030837,0.0,0.5737704918032787,4153.58,4,0,0,8,3
2021/05/21,0.2100938967136149,0.0,0.0975609756097561,0.0,5379.45,2,0,1,0,8
2021/07/04,0.1161971830985915,0.0044052863436123,0.073170731707317,0.5081967213114754,5429.4,1,0,1,7,8
2021/11/30,0.8098591549295773,0.0,0.4878048780487805,0.2622950819672131,4909.72,8,0,7,3,6
2021/02/01,0.4741784037558684,0.0,0.451219512195122,0.2950819672131147,4677.07,4,0,6,4,5
2021/09/02,0.7065727699530514,0.0,0.4634146341463415,0.819672131147541,4096.7,7,0,6,12,3
2021/05/15,0.130281690140845,0.1629955947136564,0.1463414634146341,0.639344262295082,4801.0,1,8,2,9,6
2021/04/04,0.6220657276995303,0.0,0.524390243902439,0.3278688524590163,4060.35,6,0,7,4,3
2022/01/02,0.8309859154929574,0.0,0.7073170731707318,0.4590163934426229,4480.78,8,0,10,6,4
2021/06/21,0.124413145539906,0.0044052863436123,0.024390243902439,0.180327868852459,5745.37,1,0,0,2,10
2022/01/06,0.7617370892018779,0.0,0.4024390243902439,0.3934426229508196,4847.4,7,0,6,5,6
2021/02/13,0.5093896713615023,0.0,0.3658536585365854,0.3278688524590163,4052.84,5,0,5,4,3
2022/03/11,0.453051643192488,0.0,0.2804878048780488,0.2622950819672131,4513.12,4,0,4,3,5
2022/01/11,0.7605633802816901,0.0,0.4878048780487805,0.3278688524590163,4890.41,7,0,7,4,6
2021/12/20,0.6420187793427228,0.039647577092511,0.4146341463414634,0.3934426229508196,4046.54,6,1,6,5,3
2021/10/12,0.3028169014084507,0.0,0.1707317073170731,0.081967213114754,4482.09,3,0,2,1,4
2021/02/19,0.9014084507042252,0.0,0.4878048780487805,0.4590163934426229,5725.82,9,0,7,6,9
2021/11/07,0.3392018779342722,0.3392070484581498,0.3170731707317074,0.2131147540983606,3955.91,3,16,4,3,2
2021/11/16,0.2159624413145539,0.0044052863436123,0.2682926829268293,0.2131147540983606,5137.23,2,0,4,3,7
2021/10/22,0.6572769953051641,0.0,0.2804878048780488,0.4262295081967213,4448.53,6,0,4,6,4
2021/05/07,0.4284037558685446,0.0044052863436123,0.1463414634146341,0.0,5016.13,4,0,2,0,7
2021/02/21,0.5399061032863848,0.0,0.3658536585365854,0.2459016393442623,4417.7,5,0,5,3,4
2022/03/14,0.6889671361502345,0.0088105726872246,0.3048780487804878,0.2622950819672131,4370.21,6,0,4,3,4
2021/07/21,0.1338028169014084,0.2378854625550661,0.0975609756097561,0.2622950819672131,5917.17,1,11,1,3,10
2021/07/27,0.2946009389671361,0.0,0.2073170731707317,0.8524590163934426,5209.82,2,0,3,12,7
2021/07/22,0.0657276995305163,0.013215859030837,0.1585365853658537,0.5081967213114754,6063.89,0,0,2,7,11
2022/01/19,0.6924882629107979,0.0,0.4390243902439025,0.6065573770491803,4298.87,6,0,6,9,4
2021/10/19,0.2734741784037557,0.0176211453744493,0.1585365853658537,0.3278688524590163,4626.27,2,0,2,4,5
2021/12/10,0.4002347417840374,0.0,0.1341463414634146,0.4590163934426229,4264.4,4,0,2,6,4
2021/08/05,0.2699530516431923,0.0088105726872246,0.0975609756097561,0.2622950819672131,5334.3,2,0,1,3,8
2021/11/25,0.3908450704225351,0.0,0.2560975609756097,0.2622950819672131,4700.03,3,0,3,3,5
2022/01/24,0.9612676056338026,0.0,0.6585365853658538,0.2622950819672131,6050.81,9,0,9,3,11
2022/01/07,0.7441314553990609,0.0308370044052863,0.475609756097561,0.2131147540983606,4814.57,7,1,7,3,6
2021/09/21,0.1185446009389671,0.1762114537444934,0.1829268292682927,0.4590163934426229,5248.19,1,8,2,6,8
2021/04/07,0.5363849765258214,0.0,0.1951219512195122,0.081967213114754,4725.88,5,0,2,1,5
2021/06/12,0.2640845070422534,0.2070484581497797,0.024390243902439,0.2950819672131147,4831.98,2,10,0,4,6
2021/08/07,0.244131455399061,0.0,0.0975609756097561,0.2459016393442623,4967.19,2,0,1,3,6
2021/09/07,0.2746478873239436,0.0,0.1951219512195122,0.2622950819672131,4911.86,2,0,2,3,6
2021/05/01,0.5316901408450704,0.0,0.3292682926829269,0.2950819672131147,4199.08,5,0,4,4,3
2021/05/09,0.4119718309859154,0.0088105726872246,0.0,0.2131147540983606,4138.75,4,0,0,3,3
2021/05/08,0.3814553990610327,0.0,0.1707317073170731,0.1475409836065573,4400.58,3,0,2,2,4
2021/04/12,0.2887323943661971,0.2202643171806167,0.1951219512195122,0.2131147540983606,5108.69,2,11,2,3,7
2021/08/18,0.2230046948356807,0.013215859030837,0.1097560975609756,0.1475409836065573,5429.55,2,0,1,2,8
2021/08/04,0.2018779342723003,0.013215859030837,0.1097560975609756,0.2622950819672131,5491.74,2,0,1,3,9
2021/11/09,0.3767605633802816,0.0,0.2560975609756097,0.1147540983606557,4376.05,3,0,3,1,4
2021/02/26,0.4307511737089201,0.0088105726872246,0.426829268292683,0.2950819672131147,4491.96,4,0,6,4,4
2021/04/29,0.3110328638497651,0.0,0.1341463414634146,0.0327868852459016,5132.37,3,0,2,0,7
2021/05/05,0.2828638497652582,0.0,0.048780487804878,0.2459016393442623,5050.18,2,0,0,3,7
2022/03/15,0.7194835680751172,0.0440528634361233,0.3780487804878049,0.2622950819672131,5005.89,7,2,5,3,7
2022/02/18,0.5035211267605633,0.0,0.3536585365853659,0.4262295081967213,4289.42,5,0,5,6,4
2021/12/16,0.4413145539906102,0.0,0.1829268292682927,0.2950819672131147,4237.13,4,0,2,4,3
2021/04/25,0.3157276995305163,0.0572687224669603,0.073170731707317,0.1475409836065573,4489.08,3,2,1,2,4
2022/02/17,0.612676056338028,0.0,0.2439024390243902,0.2131147540983606,4555.61,6,0,3,3,5
2022/01/16,0.7746478873239435,0.0,0.3536585365853659,0.1475409836065573,4636.54,7,0,5,2,5
2022/02/19,0.5187793427230045,0.013215859030837,0.3780487804878049,0.180327868852459,3884.0,5,0,5,2,2
2021/07/11,0.1455399061032863,0.0,0.048780487804878,0.4590163934426229,5053.55,1,0,0,6,7
2021/07/20,0.130281690140845,0.013215859030837,0.1341463414634146,0.639344262295082,6055.7,1,0,2,9,11
2021/09/17,0.42018779342723,0.0,0.2195121951219512,0.7213114754098361,4546.72,4,0,3,10,5
2021/08/25,0.2112676056338027,0.0484581497797356,0.073170731707317,0.360655737704918,5262.64,2,2,1,5,8
2021/12/03,0.4565727699530515,0.1938325991189427,0.426829268292683,0.2950819672131147,4249.22,4,9,6,4,3
2021/11/05,0.5316901408450704,0.0,0.2317073170731707,0.1475409836065573,4351.62,5,0,3,2,4
2021/10/04,0.3169014084507041,0.0220264317180616,0.1829268292682927,0.7868852459016393,4341.18,3,1,2,11,4
2021/11/06,0.714788732394366,0.0,0.3292682926829269,0.4590163934426229,4005.6,7,0,4,6,2
2022/01/12,0.8333333333333331,0.0,0.4634146341463415,0.3278688524590163,4971.09,8,0,6,4,6
2021/03/07,0.5997652582159624,0.0,0.3658536585365854,0.180327868852459,4128.66,5,0,5,2,3
2021/10/06,0.3978873239436619,0.0044052863436123,0.2682926829268293,0.3934426229508196,4403.2,3,0,4,5,4
2021/03/21,0.5774647887323942,0.026431718061674,0.1829268292682927,0.0327868852459016,4273.27,5,1,2,0,4
2021/10/10,0.2535211267605632,0.0484581497797356,0.3292682926829269,0.3934426229508196,3895.97,2,2,4,5,2
2022/03/09,0.5211267605633801,0.0,0.2439024390243902,0.4590163934426229,4206.54,5,0,3,6,3
2021/11/15,0.198356807511737,0.0352422907488986,0.3048780487804878,0.4262295081967213,4783.86,1,1,4,6,6
2021/09/29,0.4072769953051642,0.0,0.3170731707317074,0.2950819672131147,4634.31,4,0,4,4,5
2021/11/29,0.6056338028169013,0.0,0.3902439024390244,0.180327868852459,4390.37,6,0,5,2,4
2022/01/17,0.6408450704225351,0.0,0.4878048780487805,0.2950819672131147,4801.27,6,0,7,4,6
2021/10/28,0.6866197183098589,0.0044052863436123,0.5609756097560976,0.5737704918032787,4437.56,6,0,8,8,4
2021/03/22,0.6173708920187793,0.1233480176211453,0.1585365853658537,0.2622950819672131,4758.01,6,6,2,3,6
2022/03/05,0.5692488262910796,0.8325991189427312,0.6097560975609757,0.360655737704918,4454.08,5,41,9,5,4
2021/10/11,0.1748826291079811,0.0088105726872246,0.2439024390243902,0.2950819672131147,4716.47,1,0,3,4,5
2021/03/04,0.4659624413145538,0.0,0.2439024390243902,0.3278688524590163,4693.95,4,0,3,4,5
2021/07/14,0.2089201877934272,0.0484581497797356,0.1829268292682927,0.4754098360655737,5794.0,2,2,2,7,10
2022/01/08,0.5082159624413143,0.5462555066079295,0.3048780487804878,0.2131147540983606,4098.05,5,27,4,3,3
2021/06/29,0.1678403755868543,0.0,0.1341463414634146,0.4590163934426229,5595.29,1,0,2,6,9
2022/02/08,0.778169014084507,0.0,0.6585365853658538,0.2950819672131147,4959.49,7,0,9,4,6
2021/06/20,0.1525821596244131,0.0,0.0,0.081967213114754,4992.05,1,0,0,1,6
2022/01/26,1.0,0.0,0.5609756097560976,0.5081967213114754,5775.81,9,0,8,7,10
2021/08/20,0.2863849765258215,0.0176211453744493,0.2195121951219512,0.5737704918032787,5231.77,2,0,3,8,7
2021/11/04,0.3955399061032862,1.0,0.1829268292682927,0.3934426229508196,4089.18,3,49,2,5,3
2021/08/29,0.2241784037558684,0.013215859030837,0.3902439024390244,0.2950819672131147,4676.03,2,0,5,4,5
2021/05/27,0.2429577464788731,0.0088105726872246,0.0975609756097561,0.2950819672131147,5311.34,2,0,1,4,8
2021/03/06,0.4401408450704223,0.0,0.3414634146341463,0.2950819672131147,3920.84,4,0,5,4,2
2022/03/01,0.714788732394366,0.0,0.2317073170731707,0.081967213114754,5194.93,7,0,3,1,7
2021/06/05,0.0680751173708919,0.0,0.0853658536585365,0.6065573770491803,5109.72,0,0,1,9,7
2021/02/06,0.6455399061032862,0.0352422907488986,0.5487804878048781,0.3934426229508196,3993.73,6,1,8,5,2
2022/01/30,0.7676056338028168,0.0,0.1829268292682927,0.2459016393442623,4710.65,7,0,2,3,5
2021/07/30,0.1971830985915492,0.0,0.1585365853658537,0.7540983606557377,5375.98,1,0,2,11,8
2021/10/27,0.5586854460093896,0.0,0.2926829268292683,0.5081967213114754,4124.08,5,0,4,7,3
2021/12/06,0.6854460093896713,0.0,0.4634146341463415,0.5081967213114754,4451.5,6,0,6,7,4
2021/12/13,0.8744131455399059,0.0,0.4878048780487805,0.5737704918032787,4858.99,8,0,7,8,6
2022/02/05,0.6115023474178403,0.0,0.4634146341463415,0.360655737704918,3860.07,6,0,6,5,2
2021/02/17,0.7394366197183097,0.0,0.451219512195122,0.180327868852459,5387.56,7,0,6,2,8
2021/04/02,0.6913145539906101,0.0,0.4024390243902439,0.0,4221.92,6,0,6,0,3
2021/10/01,0.5129107981220655,0.4801762114537445,0.1707317073170731,0.2459016393442623,4546.66,5,24,2,3,5
2021/10/18,0.3380281690140844,0.0,0.1219512195121951,0.3278688524590163,4867.07,3,0,1,4,6
2021/09/10,0.3650234741784037,0.0,0.3780487804878049,0.3934426229508196,4747.2,3,0,5,5,5
2021/12/11,0.5117370892018779,0.0,0.2804878048780488,0.3278688524590163,3823.86,5,0,4,4,2
2021/09/22,0.2934272300469483,0.0044052863436123,0.048780487804878,0.180327868852459,4893.82,2,0,0,2,6
2021/05/14,0.220657276995305,0.092511013215859,0.1463414634146341,0.3278688524590163,5182.52,2,4,2,4,7
2021/08/15,0.3509389671361502,0.0,0.1829268292682927,0.639344262295082,4189.94,3,0,2,9,3
2022/03/16,0.6408450704225349,0.0,0.2195121951219512,0.4262295081967213,4832.51,6,0,3,6,6
2021/02/28,0.5610328638497653,0.0,0.1463414634146341,0.180327868852459,4064.63,5,0,2,2,3
2022/02/07,0.7183098591549294,0.0,0.5,0.2950819672131147,4641.62,7,0,7,4,5
2022/01/09,0.5340375586854458,0.0,0.1463414634146341,0.2459016393442623,3902.16,5,0,2,3,2
2021/09/08,0.3896713615023472,0.0,0.0853658536585365,0.4262295081967213,4515.55,3,0,1,6,5
2021/09/06,0.2546948356807511,0.0220264317180616,0.1097560975609756,0.2950819672131147,4612.08,2,1,1,4,5
2022/02/06,0.6678403755868543,0.0,0.5,0.2950819672131147,3849.31,6,0,7,4,2
2021/08/16,0.26056338028169,0.0044052863436123,0.4024390243902439,0.4754098360655737,5063.75,2,0,6,7,7
2021/11/10,0.2676056338028168,0.2202643171806167,0.3048780487804878,0.180327868852459,4725.14,2,11,4,2,5
2021/06/19,0.2406103286384975,0.0484581497797356,0.0975609756097561,0.2131147540983606,4900.7,2,2,1,3,6
2021/12/29,0.5152582159624411,0.0,0.4878048780487805,0.2459016393442623,3838.61,5,0,7,3,2
2021/04/22,0.3227699530516431,0.0,0.2439024390243902,0.2459016393442623,5154.41,3,0,3,3,7
2021/09/05,0.1725352112676055,0.211453744493392,0.2682926829268293,0.3934426229508196,4286.13,1,10,4,5,4
2021/03/02,0.3931924882629108,0.0,0.3780487804878049,0.3934426229508196,4630.56,3,0,5,5,5
2021/08/28,0.2347417840375586,0.0,0.0975609756097561,0.3934426229508196,4356.35,2,0,1,5,4
2022/01/14,0.9166666666666664,0.0,0.6341463414634148,0.3278688524590163,5669.71,9,0,9,4,9
2021/07/16,0.2511737089201878,0.0044052863436123,0.048780487804878,0.4262295081967213,5516.16,2,0,0,6,9
2022/02/04,0.5528169014084506,0.0044052863436123,0.1585365853658537,0.3934426229508196,4121.71,5,0,2,5,3
2022/02/23,0.7910798122065726,0.0,0.3902439024390244,0.2622950819672131,5225.15,7,0,5,3,7
2021/09/13,0.2007042253521126,0.1233480176211453,0.2195121951219512,0.360655737704918,4902.53,2,6,3,5,6
2022/03/07,0.5868544600938965,0.0,0.1707317073170731,0.360655737704918,4535.64,5,0,2,5,5
2021/03/23,0.5727699530516431,0.3039647577092511,0.0365853658536585,0.2459016393442623,4939.99,5,15,0,3,6
2021/12/26,0.4460093896713613,0.0,0.4878048780487805,0.3934426229508196,3277.12,4,0,7,5,0
2021/06/08,0.1561032863849765,0.066079295154185,0.2926829268292683,0.5409836065573771,5676.38,1,3,4,8,9
2021/05/02,0.6208920187793426,0.0,0.3902439024390244,0.3934426229508196,4061.56,6,0,5,5,3
2021/06/14,0.2746478873239436,0.0,0.0853658536585365,0.0,4879.14,2,0,1,0,6
2021/09/30,0.3838028169014084,0.0748898678414096,0.1219512195121951,0.1475409836065573,4819.27,3,3,1,2,6
2021/12/09,0.3779342723004694,0.039647577092511,0.3048780487804878,0.4590163934426229,4678.31,3,1,4,6,5
2021/03/05,0.426056338028169,0.0308370044052863,0.2682926829268293,0.3278688524590163,4542.26,4,1,4,4,5
2021/04/05,0.4741784037558684,0.0,0.3536585365853659,0.2459016393442623,3985.12,4,0,5,3,2
2021/07/29,0.1889671361502347,0.0176211453744493,0.2073170731707317,0.4262295081967213,5536.56,1,0,3,6,9
2022/02/09,0.8603286384976522,0.0,0.5609756097560976,0.3934426229508196,4974.47,8,0,8,5,6
2021/02/04,0.7159624413145538,0.0,0.4024390243902439,0.4590163934426229,4952.52,7,0,6,6,6
2021/12/02,0.82981220657277,0.2599118942731278,0.7439024390243902,0.4262295081967213,5013.18,8,12,11,6,7
2021/05/06,0.3826291079812206,0.0,0.1219512195121951,0.0655737704918032,5108.99,3,0,1,0,7
2021/08/17,0.2089201877934272,0.0088105726872246,0.1219512195121951,0.2459016393442623,5408.44,2,0,1,3,8
2021/08/26,0.1197183098591548,0.026431718061674,0.1463414634146341,0.2622950819672131,5622.2,1,1,2,3,9
2021/02/25,0.5023474178403755,0.0,0.3536585365853659,0.3934426229508196,4477.35,5,0,5,5,4
2021/12/27,0.5305164319248825,0.0044052863436123,0.3536585365853659,0.4590163934426229,3266.12,5,0,5,6,0
2021/04/23,0.3626760563380281,0.0088105726872246,0.1829268292682927,0.2622950819672131,5013.69,3,0,2,3,7
2022/02/22,0.5093896713615023,0.0,0.3902439024390244,0.2459016393442623,4370.37,5,0,5,3,4
2021/04/01,0.6549295774647886,0.0,0.2682926829268293,0.081967213114754,4794.32,6,0,4,1,6
2021/03/27,0.4659624413145538,0.0748898678414096,0.2317073170731707,0.2622950819672131,4148.3,4,3,3,3,3
2021/11/19,0.3791079812206571,0.0044052863436123,0.5609756097560976,0.2622950819672131,4439.38,3,0,8,3,4
2021/10/15,0.2558685446009389,0.013215859030837,0.2804878048780488,0.4754098360655737,4738.88,2,0,4,7,5
2021/03/15,0.386150234741784,0.0,0.1463414634146341,0.1475409836065573,4721.75,3,0,2,2,5
2021/10/29,0.2687793427230046,0.1101321585903083,0.5,1.0,4209.37,2,5,7,14,3
2021/04/14,0.4788732394366197,0.0,0.475609756097561,0.4590163934426229,4586.08,4,0,7,6,5
2021/04/13,0.3309859154929576,0.013215859030837,0.0,0.7213114754098361,4939.37,3,0,0,10,6
2021/10/08,0.3427230046948356,0.0,0.2439024390243902,0.4754098360655737,4314.07,3,0,3,7,4
2021/06/28,0.1678403755868543,0.0,0.0853658536585365,0.1475409836065573,5615.12,1,0,1,2,9
2021/11/13,0.2323943661971831,0.2290748898678414,0.3536585365853659,0.5081967213114754,4322.3,2,11,5,7,4
2021/03/08,0.453051643192488,0.0044052863436123,0.3658536585365854,0.2622950819672131,4473.62,4,0,5,3,4
2021/10/31,0.3204225352112675,0.0088105726872246,0.1219512195121951,0.1147540983606557,3735.4,3,0,1,1,1
2021/04/28,0.2558685446009388,0.0088105726872246,0.1829268292682927,0.1147540983606557,5135.79,2,0,2,1,7
2022/03/08,0.5023474178403755,0.0440528634361233,0.3536585365853659,0.3934426229508196,4350.79,5,2,5,5,4
2021/04/26,0.3392018779342722,0.026431718061674,0.1341463414634146,0.081967213114754,5093.54,3,1,2,1,7
2022/01/22,0.8849765258215961,0.0,0.7317073170731708,0.3278688524590163,4941.29,8,0,10,4,6
2021/12/15,0.4319248826291078,0.0,0.3658536585365854,0.2131147540983606,4833.67,4,0,5,3,6
2021/07/18,0.1936619718309858,0.092511013215859,0.0609756097560975,0.2131147540983606,5030.86,1,4,0,3,7
2021/07/23,0.1009389671361502,0.0,0.0365853658536585,0.2622950819672131,6001.35,1,0,0,3,11
2022/01/03,0.5399061032863848,0.0,0.6097560975609757,0.4262295081967213,3652.58,5,0,9,6,1
2021/03/28,0.4166666666666667,0.0,0.2682926829268293,0.1475409836065573,4098.78,4,0,4,2,3
2021/06/17,0.1514084507042253,0.0176211453744493,0.0609756097560975,0.081967213114754,5873.18,1,0,0,1,10
2021/06/30,0.2453051643192487,0.0,0.073170731707317,0.3934426229508196,5367.66,2,0,1,5,8
2021/11/12,0.2394366197183098,0.0220264317180616,0.2682926829268293,0.5737704918032787,5047.54,2,1,4,8,7
2022/01/23,0.9119718309859156,0.0,0.6951219512195123,0.180327868852459,5144.54,9,0,10,2,7
2021/07/09,0.0,0.0402672809818265,0.0609756097560975,0.0,6099.85,0,2,0,0,11
2021/11/14,0.1995305164319248,0.0352422907488986,0.073170731707317,0.5081967213114754,4127.68,1,1,1,7,3
2022/03/13,0.6971830985915491,0.0,0.3536585365853659,0.4590163934426229,4181.52,6,0,5,6,3
2022/02/20,0.5258215962441314,0.0,0.4390243902439025,0.3934426229508196,3879.26,5,0,6,5,2
2021/08/10,0.3180751173708919,0.0,0.1463414634146341,0.6065573770491803,4912.91,3,0,2,9,6
2021/08/21,0.3967136150234741,0.0220264317180616,0.2195121951219512,0.2950819672131147,4324.88,3,1,3,4,4
2021/06/02,0.3591549295774646,0.0,0.1951219512195122,0.2950819672131147,5209.58,3,0,2,4,7
2021/12/24,0.5798122065727698,0.0,0.3902439024390244,0.180327868852459,4066.46,5,0,5,2,3
2021/12/08,0.3579812206572769,0.0440528634361233,0.1829268292682927,0.4590163934426229,4265.96,3,2,2,6,4
2022/01/21,0.7981220657276994,0.0,0.5365853658536587,0.2950819672131147,5072.16,7,0,8,4,7
2022/02/15,0.5927230046948355,0.0,0.5975609756097562,0.2131147540983606,4859.47,5,0,8,3,6
2022/02/24,0.642018779342723,0.0,0.4146341463414634,0.360655737704918,5046.33,6,0,6,5,7
2021/10/16,0.2863849765258215,0.5814977973568282,0.0975609756097561,0.639344262295082,4283.73,2,29,1,9,4
2021/02/24,0.4389671361502346,0.0,0.3048780487804878,0.3278688524590163,4524.05,4,0,4,4,5
2021/10/07,0.2652582159624412,0.0881057268722467,0.3780487804878049,0.4590163934426229,4416.08,2,4,5,6,4
2021/05/18,0.2746478873239436,0.0,0.1097560975609756,0.081967213114754,5539.66,2,0,1,1,9
2021/08/14,0.2805164319248824,0.0,0.2073170731707317,0.2622950819672131,4677.52,2,0,3,3,5
2021/10/03,0.4706572769953051,0.0,0.0853658536585365,0.3278688524590163,3954.97,4,0,1,4,2
2022/02/11,0.5586854460093894,0.0,0.4634146341463415,0.3934426229508196,4223.64,5,0,6,5,3
2021/03/19,0.5997652582159622,0.0,0.3170731707317074,0.2622950819672131,4714.17,5,0,4,3,5
2021/04/06,0.4600938967136149,0.0,0.2439024390243902,0.180327868852459,4470.84,4,0,3,2,4
2021/05/22,0.2218309859154928,0.0,0.1829268292682927,0.3278688524590163,4845.72,2,0,2,4,6
2022/01/15,0.6619718309859154,0.13215859030837,0.5487804878048781,0.2459016393442623,4454.48,6,6,8,3,4
2021/06/13,0.2723004694835679,0.0,0.0853658536585365,0.0327868852459016,4795.56,2,0,1,0,6
2021/05/03,0.3884976525821595,0.0044052863436123,0.4146341463414634,0.2131147540983606,4937.26,3,0,6,3,6
2021/05/17,0.2582159624413144,0.0088105726872246,0.0365853658536585,0.2459016393442623,5306.82,2,0,0,3,8
2021/02/15,0.5798122065727698,0.0,0.3414634146341463,0.1147540983606557,4451.89,5,0,5,1,4
2021/11/01,0.436619718309859,0.0,0.2804878048780488,0.180327868852459,4025.25,4,0,4,2,3
2021/04/18,0.4072769953051642,0.0,0.1951219512195122,0.081967213114754,4345.54,4,0,2,1,4
2022/02/21,0.4671361502347417,0.0352422907488986,0.3536585365853659,0.3278688524590163,4258.16,4,1,5,4,4
2021/05/26,0.2816901408450704,0.1101321585903083,0.2073170731707317,0.3934426229508196,5234.35,2,5,3,5,7
2022/02/28,0.6502347417840374,0.0,0.2926829268292683,0.180327868852459,4919.1,6,0,4,2,6
2021/05/04,0.2546948356807511,0.6784140969162996,0.2804878048780488,0.3934426229508196,5247.58,2,33,4,5,8
2021/07/05,0.0892018779342722,0.0088105726872246,0.0975609756097561,0.1147540983606557,6231.44,0,0,1,1,11
2021/10/25,0.2629107981220657,0.0176211453744493,0.2682926829268293,0.3934426229508196,4599.85,2,0,4,5,5
2021/08/11,0.3884976525821594,0.0,0.426829268292683,0.639344262295082,5122.97,3,0,6,9,7
2021/09/09,0.5598591549295773,0.0,0.3170731707317074,0.6065573770491803,4308.73,5,0,4,9,4
2021/11/20,0.3603286384976525,0.0,0.2073170731707317,0.3278688524590163,3912.04,3,0,3,4,2
2021/07/15,0.3075117370892017,0.066079295154185,0.0975609756097561,0.4590163934426229,5345.47,3,3,1,6,8
2021/02/16,0.7981220657276994,0.0,0.3780487804878049,0.2950819672131147,5104.88,7,0,5,4,7
2021/07/02,0.2546948356807511,0.0044052863436123,0.1707317073170731,0.4590163934426229,5582.96,2,0,2,6,9
2021/06/18,0.1361502347417839,0.0352422907488986,0.1097560975609756,0.180327868852459,5781.38,1,1,1,2,10
2021/02/03,0.5938967136150232,0.0,0.3292682926829269,0.2950819672131147,4420.83,5,0,4,4,4
2021/03/25,0.4988262910798122,0.1013215859030837,0.1707317073170731,0.2622950819672131,4624.14,4,5,2,3,5
2021/11/08,0.3462441314553989,0.0044052863436123,0.1463414634146341,0.2131147540983606,4369.58,3,0,2,3,4
2021/06/23,0.2347417840375586,0.0,0.1646341463414634,0.5081967213114754,5620.05,2,0,2,7,9
2021/07/12,0.2300469483568074,0.0,0.1829268292682927,0.5737704918032787,5559.84,2,0,2,8,9
2021/12/14,0.5375586854460094,0.0,0.6341463414634148,0.2622950819672131,4621.59,5,0,9,3,5
2021/07/13,0.2136150234741783,0.0088105726872246,0.1463414634146341,0.360655737704918,5709.07,2,0,2,5,9
2021/05/10,0.3462441314553989,0.0044052863436123,0.2317073170731707,0.4262295081967213,4963.93,3,0,3,6,6
2021/03/18,0.5856807511737088,0.0,0.3536585365853659,0.1147540983606557,4840.95,5,0,5,1,6
2021/09/14,0.17018779342723,0.0044052863436123,0.1463414634146341,0.2622950819672131,5016.96,1,0,2,3,7
2022/01/05,0.8122065727699531,0.0,0.1097560975609756,0.360655737704918,4471.33,8,0,1,5,4
2022/01/25,0.8744131455399059,0.0,0.6097560975609757,0.2459016393442623,6180.59,8,0,9,3,11
2021/09/15,0.1960093896713614,0.0044052863436123,0.1829268292682927,0.2622950819672131,4929.07,1,0,2,3,6
2021/04/03,0.8157276995305163,0.0,0.2682926829268293,0.360655737704918,4250.87,8,0,4,5,3
2021/06/22,0.1220657276995304,0.0,0.1219512195121951,0.2131147540983606,5794.85,1,0,1,3,10
2021/02/10,0.7183098591549294,0.0,0.451219512195122,0.2459016393442623,5192.52,7,0,6,3,7
2021/07/28,0.2887323943661971,0.0,0.3292682926829269,0.5737704918032787,5319.07,2,0,4,8,8
2021/03/11,0.5011737089201876,0.0,0.3048780487804878,0.1475409836065573,4893.5,5,0,4,2,6
2022/01/13,0.9237089201877936,0.0,0.5,0.3278688524590163,5353.12,9,0,7,4,8
2021/09/27,0.3110328638497652,0.0,0.2317073170731707,0.4590163934426229,4489.43,3,0,3,6,4
2021/08/02,0.2077464788732393,0.0,0.1707317073170731,0.5737704918032787,5250.08,2,0,2,8,8
2021/10/13,0.3697183098591549,0.0,0.2195121951219512,0.4590163934426229,4592.06,3,0,3,6,5
2021/08/09,0.2124413145539906,0.0,0.1707317073170731,0.2459016393442623,5395.07,2,0,2,3,8
2021/08/03,0.2053990610328638,0.105726872246696,0.1585365853658537,0.3278688524590163,5530.0,2,5,2,4,9
2021/10/26,0.2816901408450702,0.0,0.1341463414634146,0.1475409836065573,4411.49,2,0,2,2,4
